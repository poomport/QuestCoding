{"index.jsx":"// Redux Code:\n  const ADD = 'ADD';\n\n  const addMessage = (message) => {\n    return {\n      type: ADD,\n      message\n    }\n  };\n\n  const messageReducer = (state = [], action) => {\n    switch (action.type) {\n      case ADD:\n        return [\n          ...state,\n          action.message\n        ];\n      default:\n        return state;\n    }\n  };\n\n\n\n  const store = Redux.createStore(messageReducer);\n\n  // React Code:\n\n  class DisplayMessages extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        input: '',\n        messages: []\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.submitMessage = this.submitMessage.bind(this);\n    }\n    handleChange(event) {\n      this.setState({\n        input: event.target.value\n      });\n    }\n    submitMessage() {\n      const currentMessage = this.state.input;\n      this.setState({\n        input: '',\n        messages: this.state.messages.concat(currentMessage)\n      });\n    }\n    render() {\n      return (\n        <div>\n          <h2>Type in a new Message:</h2>\n          <input\n            value={this.state.input}\n            onChange={this.handleChange}/><br/>\n          <button onClick={this.submitMessage}>Submit</button>\n          <ul>\n            {this.state.messages.map( (message, idx) => {\n                return (\n                   <li key={idx}>{message}</li>\n                )\n              })\n            }\n          </ul>\n        </div>\n      );\n    }\n  };\n\n  const Provider = ReactRedux.Provider;\n\n  class AppWrapper extends React.Component {\n    // Below is the code required to pass the test\n    render() {\n      return (\n        <Provider store={store}>\n          <DisplayMessages />\n        </Provider>\n      );\n    }\n    // Above is the code required to pass the test\n  };"}